
Training simple VAE
/home/joy/.venv/lib/python3.8/site-packages/torchvision/datasets/mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:180.)
  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)
Training --> SimpleVae(
  (_encoder): Encoder(
    (_net): Sequential(
      (0): Linear(in_features=784, out_features=392, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
      (2): Linear(in_features=392, out_features=392, bias=True)
      (3): LeakyReLU(negative_slope=0.01)
      (4): Linear(in_features=392, out_features=196, bias=True)
      (5): LeakyReLU(negative_slope=0.01)
      (6): Linear(in_features=196, out_features=98, bias=True)
    )
    (_fc_mean): Sequential(
      (0): Linear(in_features=98, out_features=4, bias=True)
    )
    (_fc_log_var): Sequential(
      (0): Linear(in_features=98, out_features=4, bias=True)
    )
  )
  (_decoder): Decoder(
    (_net): Sequential(
      (0): Linear(in_features=4, out_features=196, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
      (2): Linear(in_features=196, out_features=392, bias=True)
      (3): LeakyReLU(negative_slope=0.01)
      (4): Linear(in_features=392, out_features=392, bias=True)
      (5): LeakyReLU(negative_slope=0.01)
      (6): Linear(in_features=392, out_features=784, bias=True)
      (7): Sigmoid()
    )
  )
)
====> Train Loss = 5414992.0 Epoch = 1
====> Train Loss = 5350862.25 Epoch = 2
====> Train Loss = 5253465.0 Epoch = 3
====> Train Loss = 5086079.416666667 Epoch = 4
====> Train Loss = 4782887.25 Epoch = 5
====>  Test Loss = 4513277.0
====> Train Loss = 4223420.625 Epoch = 6
====> Train Loss = 3376514.3333333335 Epoch = 7
====> Train Loss = 2789549.9583333335 Epoch = 8
====> Train Loss = 1947241.0208333333 Epoch = 9
====> Train Loss = -56091565.75 Epoch = 10
====>  Test Loss = -583391552.0
====> Train Loss = -58689018330.666664 Epoch = 11
====> Train Loss = -242884243030016.0 Epoch = 12
====> Train Loss = -1.1622008771882551e+20 Epoch = 13
====> Train Loss = -1.7647522834593988e+24 Epoch = 14
====> Train Loss = -1.7693804472413992e+24 Epoch = 15
====>  Test Loss = -1.7142086446032408e+21
====> Train Loss = -1.7695427955574976e+24 Epoch = 16
====> Train Loss = -1.7743151275489564e+24 Epoch = 17
====> Train Loss = -1.7721994644271712e+24 Epoch = 18
====> Train Loss = -1.7739258451580752e+24 Epoch = 19
====> Train Loss = -1.772975185349963e+24 Epoch = 20
====>  Test Loss = -2.0949580160123965e+21
====> Train Loss = -1.7694106293164346e+24 Epoch = 21
====> Train Loss = -1.7694840117604114e+24 Epoch = 22
====> Train Loss = -1.7695163559151117e+24 Epoch = 23
====> Train Loss = -1.770959660968025e+24 Epoch = 24
====> Train Loss = -1.7717183084279698e+24 Epoch = 25
====>  Test Loss = -2.431357204928603e+21
====> Train Loss = -1.7696667988893624e+24 Epoch = 26
====> Train Loss = -1.7683305390984797e+24 Epoch = 27
====> Train Loss = -1.770450370665292e+24 Epoch = 28
====> Train Loss = -1.7698532848809827e+24 Epoch = 29
====> Train Loss = -1.7709829156213603e+24 Epoch = 30
====>  Test Loss = -2.824014797439968e+21
====> Train Loss = -1.7710087008168331e+24 Epoch = 31
====> Train Loss = -1.7720121696875744e+24 Epoch = 32
====> Train Loss = -1.7740467601523598e+24 Epoch = 33
====> Train Loss = -1.770995462374311e+24 Epoch = 34
====> Train Loss = -1.7710914794174338e+24 Epoch = 35
====>  Test Loss = -3.350713025660761e+21
====> Train Loss = -1.7682864079035187e+24 Epoch = 36
====> Train Loss = -1.7715102202639622e+24 Epoch = 37
Python 3.8.10 (default, Sep 28 2021, 16:10:42)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.27.0 -- An enhanced Interactive Python. Type '?' for help.
PyDev console: using IPython 7.27.0
Out[1]:
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
Out[2]: torch.Size([10000, 784])
Out[3]:
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
